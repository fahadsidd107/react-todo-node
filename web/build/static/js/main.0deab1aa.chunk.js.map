{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","todoApp","collection","validationSchema","yup","todoItem","required","id","a","deleteDoc","doc","App","useState","todo","settodo","useEffect","q","query","orderBy","unsubscribe","onSnapshot","snapshot","forEach","data","unshift","console","log","formik","useFormik","initialValues","onSubmit","values","addDoc","timestamp","serverTimestamp","docRef","error","style","padding","className","margin","textAlign","handleSubmit","Grid","container","spacing","sx","paddingLeft","paddingRight","item","xl","lg","xs","sm","md","Stack","TextField","color","variant","placeholder","name","inputProps","maxlength","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","height","width","type","map","eachTodo","i","fontSize","background","onClick","del","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0deab1aa.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"\r\nimport { getFirestore } from \"firebase/firestore\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBRhOpbsn5zrIgIfhZSywYuFgZRHirt6rA\",\r\n  authDomain: \"weatherapp-efd8c.firebaseapp.com\",\r\n  projectId: \"weatherapp-efd8c\",\r\n  storageBucket: \"weatherapp-efd8c.appspot.com\",\r\n  messagingSenderId: \"209376326269\",\r\n  appId: \"1:209376326269:web:9ea87d324d78d7aea33714\"\r\n  };\r\ninitializeApp(firebaseConfig)\r\n\r\nexport const db = getFirestore();","import './App.css';\nimport { useFormik } from \"formik\";\nimport { Grid } from '@mui/material';\nimport Item from '@mui/material/Grid'\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport SendIcon from '@mui/icons-material/Send';\nimport Button from '@mui/material/Button';\nimport * as yup from 'yup';\nimport { useEffect, useState } from \"react\"\nimport {\n  collection, addDoc, onSnapshot,\n  query, serverTimestamp, orderBy, deleteDoc, updateDoc, doc\n} from \"firebase/firestore\"\nimport { db } from './firebase'\n\nconst todoApp = collection(db, \"todos\")\n\nconst validationSchema = yup.object({\n  todoItem: yup\n    .string('add something todo')\n    .required('required*'),\n});\n\nasync function del(id) {\n  await deleteDoc(doc(todoApp, id)\n\n  );\n}\n\n\nfunction App() {\n  const [todo, settodo] = useState([])\n\n  useEffect(() => {\n    const q = query(todoApp, orderBy(\"timestamp\"));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n\n      let todo = [];\n      snapshot.forEach((doc) => {\n\n        let id = doc.id;\n        let data = doc.data();\n\n        todo.unshift({\n          id: id,\n          todoItem: data.todoItem,\n\n        });\n      })\n      settodo(todo)\n    });\n\n    return () => {\n      unsubscribe()\n      console.log(\"unsub\")\n    };\n  }, []);\n\n  const formik = useFormik({\n\n    initialValues: {\n      todoItem: \"\"\n    },\n    onSubmit: async (values) => {\n      try {\n        const docRef = await addDoc(todoApp, {\n          timestamp: serverTimestamp(),\n          todoItem: values.todoItem\n        });\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (e) {\n        console.error(\"Error adding document: \", e);\n      }\n    },\n    validationSchema: validationSchema,\n  });\n  return (\n    <div style={{ padding: \"1rem\" }} className=\"App\">\n      <h1 style={{ margin: \"auto\", padding: \"1rem\", textAlign: \"center\" }}>TODO APP</h1>\n      <br />\n      <form onSubmit={formik.handleSubmit}>\n        <div id=\"in\" >\n          <Grid container spacing={1} sx={{ paddingLeft: \"10%\", paddingRight: \"10%\" }} >\n            <Grid item xl={10} lg={10} xs={12} sm={12} md={10}  >\n              <Item  >\n                <Stack spacing={3}  >\n                  <TextField\n                    color=\"primary\"\n                    id=\"outlined-basic\"\n                    variant=\"standard\"\n                    placeholder=\"Enter text here\"\n                    name=\"todoItem\"\n                    inputProps={{\n                      maxlength: 20\n                    }}\n                    value={formik.values.todoItem}\n                    onChange={formik.handleChange}\n                    error={formik.touched.todoItem && Boolean(formik.errors.todoItem)}\n                    helperText={formik.touched.todoItem && formik.errors.todoItem}\n                  />\n                </Stack>\n              </Item >\n            </Grid>\n            <Grid item xl={2} lg={2} xs={6} sm={6} md={2} >\n              <Item>\n                <Button sx={{ height: \"40px\", width: \"100%\", }} variant=\"contained\"  color=\"primary\" type=\"submit\">Add</Button>\n              </Item >\n            </Grid>\n          </Grid>\n        </div>\n      </form>\n\n      <div >\n        <br />\n        <Grid container spacing={1} sx={{ paddingLeft: \"10%\", paddingRight: \"10%\" }}>\n          <Grid item xl={12} lg={12} xs={12} sm={12} md={12} sx={{ textAlign: \"left\", margin: \"auto\" }}   >\n            <Item   >\n              <Stack spacing={1}  >\n                {todo.map((eachTodo, i) => {\n                  return (<div key={i}>\n                    <ol>\n                      <li style={{ fontSize: \"24px\" }}>\n                        {eachTodo.todoItem}  <Button sx={{ background: \"#ff0606\", color: \"black\", width: \"10%\", fontSize: \"11px\" }} variant=\"contained\" color=\"error\" onClick={() => { del(eachTodo.id) }}>Delete Item </Button>\n                        &nbsp;&nbsp;<Button sx={{ background: \"yellow\", color: \"black\", width: \"10%\", fontSize: \"11px\" }} variant=\"contained\" color=\"secondary\"\n                          onClick={() => {}}>Edit Item </Button>\n                        <hr />\n                      </li>\n                    </ol>\n                  </div>)\n                })}\n              </Stack>\n            </Item >\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}